#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 14
#define YY_END_OF_BUFFER 15
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[394] =
    {   0,
        0,    0,   15,   13,    2,    1,   13,   13,   10,   13,
        4,    3,   14,   13,    9,   13,   13,   13,    0,   13,
       13,    0,   12,   13,    0,   13,   13,    8,    6,    5,
       13,    0,   13,   13,    0,   11,   13,   13,    0,   13,
       13,    0,   13,   12,    0,   12,   12,   12,    0,   12,
       13,   13,    0,   12,   13,    0,   13,   13,    0,   13,
       13,   11,    0,   13,    7,   11,   13,    0,   12,   13,
        0,   11,   13,   11,   13,    0,   13,   13,   13,    0,
       13,   13,   13,   13,   12,   12,    0,   12,   12,   12,
       12,    0,   12,   13,    0,   12,   13,   13,    0,   13,

       12,    0,   13,   13,   13,   11,   13,    0,   12,   13,
       11,    0,   13,   13,   13,    0,   13,   13,   11,    0,
       13,   13,   13,    0,   13,   12,    0,   11,   12,   12,
       12,    0,   11,   13,   11,   13,    0,   13,   13,   13,
        0,   11,   13,   13,   13,    0,   13,   13,   13,    0,
       13,   12,   12,   12,   12,    0,   12,   12,   12,   12,
       13,    0,   13,   13,    0,   12,   13,   13,    0,   13,
       12,   12,    0,   12,   13,   12,   13,    0,   13,   13,
       13,    0,   13,   12,   11,    0,   12,   12,   12,   11,
        0,   12,   13,   13,    0,   12,   13,   11,    0,   13,

       11,   13,   13,   13,   13,   13,   13,    0,   13,   12,
       12,    0,   11,   12,   11,   13,    0,   12,   13,   13,
        0,   11,   13,   11,   13,   11,   13,   13,    0,   13,
       13,   13,   12,   12,   12,   12,   12,    0,   12,   12,
       12,   12,    0,   13,   12,   13,    0,   13,   12,   13,
        0,   13,   12,   12,   12,    0,   12,   13,   13,   12,
       13,    0,   13,   13,   13,   13,    0,   13,   12,   12,
       11,    0,   13,   12,   13,    0,   13,   12,   12,   12,
       12,   11,    0,   12,   12,   11,    0,   13,   13,   13,
       13,   12,   12,   12,   12,    0,   11,   12,   13,    0,

       11,   13,   11,   13,   13,    0,   11,   13,   13,   13,
        0,   13,   12,   12,   12,   12,    0,   12,   13,   13,
       12,   13,    0,   13,   12,   12,   12,    0,   12,   12,
       12,   12,    0,   12,   13,   13,   12,   12,   12,    0,
       12,   13,   13,   12,   13,    0,   13,   12,   12,   12,
       12,   11,    0,   12,   12,   11,   12,   12,   12,    0,
       11,   13,   12,   13,    0,   11,   13,   13,   12,   12,
       12,   12,    0,   12,   13,   12,   12,   12,   12,   12,
        0,   12,   13,   12,   12,   12,    0,   11,   13,   12,
       12,   12,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    1,    6,    1,    7,
        8,    1,    1,    1,    1,    1,    1,    1,    1,    9,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,   11,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   12,    1,    1,    1,   13,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,   14,
        1,    1,    1,    1,    1,   14,    1,    1,    1,    1,
        1,    1,    1,   15,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[16] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    2,
        2,    1,    1,    4,    2
    } ;

static const flex_int16_t yy_base[465] =
    {   0,
        0,    0,  266,   12, 2065, 2065,   25,   37,  258,   47,
     2065,   12,   59,   74, 2065,  253,    0,  256,    0,   89,
        0,   16,  104,  255,    0,  119,  134, 2065, 2065,  255,
        0,  247,  149,  249,  162,    0,  176,    0,  242,    0,
      247,  189,    0,  203,   40,    0,    0,  246,    0,  218,
      233,    0,  245,    0,  245,  256,    0,    0,  243,  270,
      243,    0,  283,  297, 2065,  308,    0,  318,  331,  229,
      344,    0,  358,  214,    0,  198,    0,  194,    0,  371,
      385,  396,    0,  189,    0,    0,    0,  409,    0,    0,
      192,  422,    0,    0,  433,    0,  191,    0,  443,  457,

      472,  485,  499,    0,    0,  514,    0,  526,  538,  190,
        0,  551,  565,    0,    0,   40,    0,  189,    0,  578,
        0,    0,  188,  591,  606,  621,  634,    0,    0,    0,
      187,  646,    0,  660,    0,    0,   55,    0,  186,    0,
      673,    0,  687,    0,    0,   58,    0,  172,    0,  700,
        0,    0,    0,  167,    0,  712,  726,    0,  741,  756,
      771,  784,    0,    0,  795,    0,  166,    0,  806,    0,
        0,    0,  818,  832,    0,    0,  165,    0,  847,    0,
      164,  860,  874,  889,  904,  917,  931,    0,  163,    0,
      944,  958,  973,  988, 1000,    0,  162,    0, 1011,    0,

        0,    0, 1025, 1040,    0, 1055,  161, 1068,    0, 1082,
        0, 1095,    0, 1109,    0,    0, 1121,    0,  160,    0,
     1132,    0, 1146,    0,    0,    0,    0,  159, 1159, 1173,
        0,    0,    0,    0,    0,  145,    0, 1186,    0,    0,
        0, 1200, 1213, 1227,    0,  130, 1240, 1254, 1269,    0,
     1282,    0,    0,    0,  115,    0, 1296,    0,    0,    0,
      100, 1309,    0,    0,    0,   85, 1321,    0,    0,    0,
     1335, 1348, 1362,    0,   70, 1375, 1389, 1404,    0,    0,
       65,    0, 1417,    0, 1431,    0, 1444,    0, 1458, 1473,
        0,    0,    0,   60,    0, 1486,    0, 1500, 1515, 1528,

        0,    0, 1542,    0,   58, 1555,    0,    0,    0,   57,
     1567,    0,    0,    0,    0,   50, 1579, 1593,    0,    0,
        0,   49, 1606,    0,    0,    0,    0, 1618,    0,    0,
        0,   48, 1630,    0,    0,    0,    0,    0,   40, 1642,
     1656,    0,    0,    0,   39, 1669,    0,    0,    0,    0,
        0,    0, 1681,    0,    0, 1695,    0,    0, 1710, 1723,
        0,    0,    0,   38, 1735,    0,    0,    0,    0,    0,
        0,   15, 1747,    0,    0,    0,    0,    0,    0,   14,
     1759,    0,    0,    0,    0,   12, 1771,    0,    0,    0,
        0,    0, 2065, 1785, 1789, 1793, 1796, 1800, 1804, 1808,

     1812, 1815, 1819, 1823, 1827, 1831, 1835, 1839, 1843, 1847,
     1851, 1854, 1858, 1862, 1866, 1870, 1874, 1878, 1882, 1886,
     1890, 1894, 1898, 1902, 1906, 1910, 1914, 1918, 1921, 1925,
     1929, 1933, 1937, 1941, 1945, 1949, 1953, 1957, 1961, 1965,
     1969, 1973, 1977, 1980, 1984, 1988, 1992, 1996, 2000, 2004,
     2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044,
     2048, 2052, 2056, 2060
    } ;

static const flex_int16_t yy_def[465] =
    {   0,
      393,    1,  393,  394,  393,  393,  393,  394,    8,  394,
      393,  393,  394,  393,  393,   10,    7,    8,   13,  393,
        7,  395,  393,    7,  396,  393,  393,  393,  393,  393,
       14,  397,  393,   14,  398,   20,  393,   20,  399,   26,
       20,  400,   20,  393,  395,   23,   23,   23,  401,  393,
      393,   26,  402,   50,   26,  403,   26,   27,  404,  393,
       27,   27,  405,  393,  393,  406,   33,  407,  393,   33,
      408,   26,  393,    8,   37,  409,   51,   37,   37,  410,
      393,  406,   81,   10,   44,   44,  411,  393,   50,   50,
       50,  412,   50,   51,  413,   88,   51,   51,  414,  393,

      393,  402,  393,  100,    7,  393,   60,  415,  393,   60,
       60,  416,  393,   27,   64,  417,  113,   64,   64,  418,
       64,   82,   82,  406,  393,  393,  407,  103,   69,   69,
       69,  419,   50,  393,    7,   73,  420,  134,   73,   73,
      421,   81,  393,   37,   81,  422,  100,   81,   81,  423,
       81,   88,   88,   88,   88,  424,  393,  157,  393,  393,
      393,  413,   51,  100,  425,  157,  100,  100,  426,  100,
      101,  101,  427,  393,  103,  174,  103,  428,  393,  106,
      106,  429,  393,  393,  393,  430,  393,  187,  187,  187,
      431,  393,  393,  393,  432,  192,  194,  194,  433,  194,

      183,  106,  393,  393,  143,  393,  206,  434,  206,  393,
      210,  435,  174,  393,  159,  134,  436,  214,  134,  134,
      437,  100,  393,  143,   73,   37,  143,  143,  438,  393,
      230,   81,   88,  157,  157,  157,  157,  439,  157,  160,
      160,  393,  440,  393,  242,  244,  441,  393,  393,  248,
      442,  100,  174,  174,  174,  443,  393,  244,  179,  257,
      179,  444,  179,  106,  183,  183,  445,  183,  184,  184,
      393,  446,  393,  271,  273,  447,  393,  393,  192,  192,
      192,  192,  448,  192,  393,  277,  449,  273,  393,  393,
      230,  214,  214,  214,  214,  450,  157,  393,  393,  436,

      244,  134,  393,  223,  223,  451,  230,  143,  230,  230,
      452,  230,  157,  242,  242,  242,  453,  393,  244,  248,
      318,  248,  454,  248,  249,  249,  318,  455,  242,  257,
      257,  257,  456,  257,  248,  183,  271,  271,  271,  457,
      393,  273,  277,  341,  277,  458,  277,  192,  278,  285,
      285,  341,  459,  271,  214,  393,  298,  298,  393,  460,
      242,  299,  359,  299,  461,  248,  223,  230,  242,  318,
      318,  318,  462,  318,  248,  318,  271,  341,  341,  341,
      463,  341,  277,  359,  359,  359,  464,  318,  299,  318,
      341,  359,    0,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393
    } ;

static const flex_int16_t yy_nxt[2081] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,    4,   10,   11,
       12,   13,   14,    4,   15,   17,   18,   29,  392,   44,
      391,  390,   30,   19,   20,   21,   22,   45,   23,   24,
       21,   21,   21,   21,   22,   22,   25,   26,   21,   22,
       17,   18,   22,   27,  389,  383,  377,  201,   19,   20,
       17,   18,  202,  393,  376,  375,  369,   28,   19,   20,
       16,   16,  223,  368,  367,  231,  355,  224,   16,   16,
      143,  348,  393,   16,   31,   32,  342,   33,   34,   31,
       31,   31,   31,   32,   32,   35,   36,   31,   32,   38,
       39,  336,   40,   41,   38,   38,   38,   38,   39,   39,

       42,   43,   38,   39,   46,   22,  335,   47,   48,   46,
       46,   46,   46,   22,   22,   49,   50,   46,   22,   52,
       53,  329,   54,   55,   52,   52,   52,   52,   53,   53,
       56,   57,   52,   53,   58,   59,  319,   60,   61,   58,
       58,   62,   58,   59,   59,   63,   64,   58,   59,   67,
       68,  313,   69,   70,   67,   67,   67,   67,   68,   68,
       71,   72,   67,   68,   16,  308,  302,  291,  289,  278,
      264,  258,  252,  233,   74,   32,   75,   76,  232,   77,
       78,   75,   75,   79,   75,   76,   76,   80,   81,   75,
       76,   16,  225,  214,  205,  203,  193,  163,  158,  393,

      144,   84,   39,   85,   22,  143,   86,   85,   85,   85,
       85,   85,   22,   22,   87,   85,   85,   22,   89,   53,
       16,   90,   91,   89,   89,   89,   89,   53,   53,   92,
       93,   89,   53,   94,   95,  134,   96,   97,   94,   94,
       98,   94,   95,   95,   99,  100,   94,   95,  101,  114,
      106,  104,   88,   83,   82,   73,  102,  103,   21,   66,
       65,   51,   37,  393,   16,  393,  393,  393,  105,   39,
      107,  108,  393,  109,  110,  107,  107,  111,  107,  108,
      108,  112,  113,  107,  108,   16,  393,  393,  393,  393,
       62,  393,  393,  393,  393,  393,   59,  115,  116,  393,

      117,  118,  115,  115,  119,  115,  116,  116,  120,  121,
      115,  116,  123,  393,  393,  393,  393,  393,  393,  124,
      125,  126,  393,  393,  393,  393,  393,  393,  393,  127,
      128,  129,   68,  393,  130,  131,  129,  129,  129,  129,
       68,   68,  132,  133,  129,   68,   21,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  135,   32,  136,  137,
      393,  138,  139,  136,  136,  140,  136,  137,  137,  141,
      142,  136,  137,   16,  393,  393,  393,  393,   79,  393,
      393,  393,  393,  393,   76,  145,  146,  393,  147,  148,
      145,  145,  149,  145,  146,  146,  150,  151,  145,  146,

      123,  393,  393,  393,  393,  393,  393,  124,  125,  152,
       95,  393,  153,  154,  152,  152,  155,  152,   95,   95,
      156,  157,  152,   95,   46,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  159,   39,  160,  393,  393,  393,
      161,  393,  393,  393,  162,   21,  393,  393,  393,  393,
       98,  393,  393,  393,  393,  393,   76,  164,  165,  393,
      166,  167,  164,  164,  168,  164,  165,  165,  169,  170,
      164,  165,  171,   53,  393,  172,  171,  171,  171,  171,
      171,   53,   53,  173,  174,  171,   53,   22,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  103,   39,  175,

       22,  393,  176,  177,  175,  175,  175,  175,   22,   22,
      178,  179,  175,   22,  180,   59,  393,  180,  181,  180,
      180,  106,  180,   59,   59,  182,  183,  180,   59,  184,
      393,  393,  393,  185,  393,  393,  393,  186,  187,  108,
      393,  188,  189,  187,  187,  190,  187,  108,  108,  191,
      192,  187,  108,   21,  393,  393,  393,  393,  111,  393,
      393,  393,  393,  393,   59,  194,  195,  393,  196,  197,
      194,  194,  198,  194,  195,  195,  199,  200,  194,  195,
       16,  393,  393,  393,  393,  119,  393,  393,  393,  393,
      204,  116,  122,  122,  393,  393,  393,  393,  393,  393,

      122,  122,  393,  393,  393,  122,  206,   39,  393,  206,
      207,  206,  206,  206,  206,   39,   39,  208,  209,  206,
       39,  210,   68,  393,  211,  210,  210,  210,  210,  210,
       68,   68,  212,  213,  210,   68,   22,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  128,   32,   46,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  215,   32,
      216,  217,  393,  218,  219,  216,  216,  220,  216,  217,
      217,  221,  222,  216,  217,   16,  393,  393,  393,  393,
      140,  393,  393,  393,  393,  226,  137,  227,   76,  393,
      227,  228,  227,  227,  143,  227,   76,   76,  229,  230,

      227,   76,   16,  393,  393,  393,  393,  149,  393,  393,
      393,  393,   79,  146,   46,  393,  393,  393,  393,  155,
      393,  393,  393,  393,  393,   76,  234,  165,  393,  235,
      236,  234,  234,  237,  234,  165,  165,  238,  239,  234,
      165,   46,   22,  393,   47,   48,   46,   46,   46,   46,
       22,   22,   49,   50,   46,   22,  240,   95,  393,  241,
      240,  240,  240,  242,  240,   95,   95,  243,  240,  240,
       95,  244,   95,  393,  245,  246,  244,  244,  161,  244,
       95,   95,  247,  248,  244,   95,   22,  393,  393,  393,
      393,  161,  393,  393,  393,  393,  393,   76,  249,  393,

      393,  393,  250,  393,  393,  393,  251,  161,   21,  393,
      393,  393,  393,  168,  393,  393,  393,  393,   98,  146,
       85,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      174,   39,  253,   22,  393,  254,  255,  253,  253,  253,
      253,   22,   22,  256,  257,  253,   22,  259,   53,  393,
      260,  261,  259,  259,  259,  259,   53,   53,  262,  263,
      259,   53,  122,  393,  393,  393,  393,  106,  393,  393,
      393,  393,  393,   59,  265,  116,  393,  265,  266,  265,
      265,  201,  265,  116,  116,  267,  268,  265,  116,  269,
      108,  393,  270,  269,  269,  269,  271,  269,  108,  108,

      272,  269,  269,  108,  273,  108,  393,  274,  275,  273,
      273,  185,  273,  108,  108,  276,  277,  273,  108,   22,
      393,  393,  393,  393,  185,  393,  393,  393,  393,  393,
       59,  187,  108,  393,  188,  189,  187,  187,  190,  187,
      108,  108,  191,  192,  187,  108,   46,  393,  393,  393,
      393,  190,  393,  393,  393,  393,  393,   59,  279,  195,
      393,  280,  281,  279,  279,  282,  279,  195,  195,  283,
      284,  279,  195,  107,  108,  393,  109,  110,  107,  107,
      111,  107,  108,  108,  112,  113,  107,  108,  194,  195,
      393,  196,  197,  194,  194,  198,  194,  195,  195,  199,

      200,  194,  195,  285,  393,  393,  393,  286,  393,  393,
      393,  287,  288,   21,  393,  393,  393,  393,  198,  393,
      393,  393,  393,  290,  116,  115,  116,  393,  117,  118,
      115,  115,  119,  115,  116,  116,  120,  121,  115,  116,
       58,   59,  393,   60,   61,   58,   58,   62,   58,   59,
       59,   63,   64,   58,   59,  206,   39,  393,  206,  207,
      206,  206,  206,  206,   39,   39,  208,  209,  206,   39,
      122,  393,  393,  393,  393,  393,  393,  393,  393,  393,
       82,   39,  210,   68,  393,  211,  210,  210,  210,  210,
      210,   68,   68,  212,  213,  210,   68,   85,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  213,   32,  292,
      217,  393,  293,  294,  292,  292,  295,  292,  217,  217,
      296,  297,  292,  217,  298,  393,  393,  393,  299,  393,
      393,  393,  300,  301,   21,  393,  393,  393,  393,  220,
      393,  393,  393,  393,  303,  137,  304,  137,  393,  304,
      305,  304,  304,  223,  304,  137,  137,  306,  307,  304,
      137,  122,  393,  393,  393,  393,  143,  393,  393,  393,
      393,  393,   76,  309,  146,  393,  309,  310,  309,  309,
      231,  309,  146,  146,  311,  312,  309,  146,   46,  393,
      393,  393,  393,  237,  393,  393,  393,  393,  155,  146,

      314,   95,  393,  315,  316,  314,  314,  242,  314,   95,
       95,  317,  318,  314,   95,   85,  393,  393,  393,  393,
      242,  393,  393,  393,  393,  393,   76,  244,   95,  393,
      245,  246,  244,  244,  161,  244,   95,   95,  247,  248,
      244,   95,  175,  393,  393,  393,  393,  161,  393,  393,
      393,  393,  393,   76,  320,  165,  393,  321,  322,  320,
      320,  250,  320,  165,  165,  323,  324,  320,  165,  325,
      165,  393,  326,  325,  325,  325,  327,  325,  165,  165,
      328,  242,  325,  165,   22,  393,  393,  393,  393,  250,
      393,  393,  393,  393,  161,  146,  330,   53,  393,  331,

      332,  330,  330,  330,  330,   53,   53,  333,  334,  330,
       53,  175,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  103,   39,  122,  393,  393,  393,  393,  201,  393,
      393,  393,  393,  202,  116,  337,  108,  393,  338,  339,
      337,  337,  271,  337,  108,  108,  340,  341,  337,  108,
       85,  393,  393,  393,  393,  271,  393,  393,  393,  393,
      393,   59,  273,  108,  393,  274,  275,  273,  273,  185,
      273,  108,  108,  276,  277,  273,  108,  175,  393,  393,
      393,  393,  185,  393,  393,  393,  393,  393,   59,  343,
      195,  393,  344,  345,  343,  343,  286,  343,  195,  195,

      346,  347,  343,  195,  187,  108,  393,  188,  189,  187,
      187,  190,  187,  108,  108,  191,  192,  187,  108,   46,
      393,  393,  393,  393,  282,  393,  393,  393,  393,  349,
      116,  350,  195,  393,  351,  350,  350,  350,  352,  350,
      195,  195,  353,  354,  350,  195,   22,  393,  393,  393,
      393,  286,  393,  393,  393,  393,  288,  116,  194,  195,
      393,  196,  197,  194,  194,  198,  194,  195,  195,  199,
      200,  194,  195,  107,  108,  393,  109,  110,  107,  107,
      111,  107,  108,  108,  112,  113,  107,  108,   46,  393,
      393,  393,  393,  295,  393,  393,  393,  393,  356,  137,

      357,  217,  393,  358,  357,  357,  357,  359,  357,  217,
      217,  360,  361,  357,  217,  362,  217,  393,  363,  364,
      362,  362,  299,  362,  217,  217,  365,  366,  362,  217,
       22,  393,  393,  393,  393,  299,  393,  393,  393,  393,
      301,  137,   94,   95,  393,   96,   97,   94,   94,   98,
       94,   95,   95,   99,  100,   94,   95,  122,  393,  393,
      393,  393,  223,  393,  393,  393,  393,  224,  137,  122,
      393,  393,  393,  393,  231,  393,  393,  393,  393,  143,
      146,  253,  393,  393,  393,  393,  242,  393,  393,  393,
      393,  393,   76,  370,  165,  393,  371,  372,  370,  370,

      327,  370,  165,  165,  373,  374,  370,  165,  175,  393,
      393,  393,  393,  250,  393,  393,  393,  393,  161,  146,
       85,  393,  393,  393,  393,  327,  393,  393,  393,  393,
      242,  146,  253,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  174,   39,  253,  393,  393,  393,  393,  271,
      393,  393,  393,  393,  393,   59,  378,  195,  393,  379,
      380,  378,  378,  352,  378,  195,  195,  381,  382,  378,
      195,  175,  393,  393,  393,  393,  286,  393,  393,  393,
      393,  288,  116,   85,  393,  393,  393,  393,  352,  393,
      393,  393,  393,  354,  116,  152,   95,  393,  153,  154,

      152,  152,  155,  152,   95,   95,  156,  157,  152,   95,
      384,  217,  393,  385,  386,  384,  384,  359,  384,  217,
      217,  387,  388,  384,  217,   85,  393,  393,  393,  393,
      359,  393,  393,  393,  393,  361,  137,  175,  393,  393,
      393,  393,  299,  393,  393,  393,  393,  301,  137,  253,
      393,  393,  393,  393,  327,  393,  393,  393,  393,  242,
      146,  253,  393,  393,  393,  393,  352,  393,  393,  393,
      393,  354,  116,  253,  393,  393,  393,  393,  359,  393,
      393,  393,  393,  361,  137,   16,  393,  393,   16,   22,
       22,  393,   22,   21,   21,   21,   32,   32,  393,   32,

       31,   31,   31,   31,   39,   39,  393,   39,   38,   38,
       38,   38,   46,   46,   46,   53,   53,  393,   53,   52,
       52,   52,   52,   59,   59,  393,   59,   58,   58,   58,
       58,  122,  393,  393,  122,   68,   68,  393,   68,   67,
       67,   67,   67,   76,   76,  393,   76,   75,   75,   75,
       75,   85,   85,   85,   89,   89,   89,   89,   95,   95,
      393,   95,   94,   94,   94,   94,  108,  108,  393,  108,
      107,  107,  107,  107,  116,  116,  393,  116,  115,  115,
      115,  115,  129,  129,  129,  129,  137,  137,  393,  137,
      136,  136,  136,  136,  146,  146,  393,  146,  145,  145,

      145,  145,  152,  152,  152,  152,  165,  165,  393,  165,
      164,  164,  164,  164,  171,  171,  171,  171,  175,  175,
      175,  180,  180,  180,  180,  108,  108,  108,  108,  187,
      187,  187,  187,  195,  195,  393,  195,  194,  194,  194,
      194,  206,  206,  206,  206,  210,  210,  210,  210,  217,
      217,  393,  217,  216,  216,  216,  216,  227,  227,  227,
      227,  234,  234,  234,  234,  240,  240,  240,  240,  244,
      244,  244,  244,  165,  165,  165,  165,  253,  253,  253,
      259,  259,  259,  259,  265,  265,  265,  265,  269,  269,
      269,  269,  273,  273,  273,  273,  279,  279,  279,  279,

      195,  195,  195,  195,  292,  292,  292,  292,  304,  304,
      304,  304,  309,  309,  309,  309,  314,  314,  314,  314,
      320,  320,  320,  320,  325,  325,  325,  325,  330,  330,
      330,  330,  337,  337,  337,  337,  343,  343,  343,  343,
      350,  350,  350,  350,  357,  357,  357,  357,  362,  362,
      362,  362,  370,  370,  370,  370,  378,  378,  378,  378,
      384,  384,  384,  384,    3,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393
    } ;

static const flex_int16_t yy_chk[2081] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,   12,  386,   22,
      380,  372,   12,    4,    4,    7,    7,   22,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        8,    8,   45,    8,  364,  345,  339,  116,    8,    8,
       10,   10,  116,   45,  332,  322,  316,   10,   10,   10,
       13,   13,  137,  310,  305,  146,  294,  137,   13,   13,
      146,  281,   13,   13,   14,   14,  275,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   20,
       20,  266,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   23,   23,  261,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   26,
       26,  255,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   27,   27,  246,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   33,
       33,  236,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   35,  228,  219,  207,  197,  189,
      181,  177,  167,  154,   35,   35,   37,   37,  148,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   42,  139,  131,  123,  118,  110,   97,   91,   84,

       78,   42,   42,   44,   44,   76,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   50,   50,
       74,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   51,   51,   70,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   53,   61,
       59,   55,   48,   41,   39,   34,   53,   53,   56,   32,
       30,   24,   18,   16,    9,    3,    0,    0,   56,   56,
       60,   60,    0,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   63,    0,    0,    0,    0,
       63,    0,    0,    0,    0,    0,   63,   64,   64,    0,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   66,    0,    0,    0,    0,    0,    0,   66,
       66,   68,    0,    0,    0,    0,    0,    0,    0,   68,
       68,   69,   69,    0,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   71,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   71,   71,   73,   73,
        0,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   80,    0,    0,    0,    0,   80,    0,
        0,    0,    0,    0,   80,   81,   81,    0,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       82,    0,    0,    0,    0,    0,    0,   82,   82,   88,
       88,    0,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,   92,   95,    0,    0,    0,
       95,    0,    0,    0,   95,   99,    0,    0,    0,    0,
       99,    0,    0,    0,    0,    0,   99,  100,  100,    0,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,  101,    0,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,  102,  103,

      103,    0,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  106,  106,    0,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  108,
        0,    0,    0,  108,    0,    0,    0,  108,  109,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  112,    0,    0,    0,    0,  112,    0,
        0,    0,    0,    0,  112,  113,  113,    0,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      120,    0,    0,    0,    0,  120,    0,    0,    0,    0,
      120,  120,  124,  124,    0,    0,    0,    0,    0,    0,

      124,  124,    0,    0,  124,  124,  125,  125,    0,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  126,  126,    0,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  127,  127,  132,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,  132,
      134,  134,    0,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  141,    0,    0,    0,    0,
      141,    0,    0,    0,    0,  141,  141,  143,  143,    0,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  150,    0,    0,    0,    0,  150,    0,    0,
        0,    0,  150,  150,  156,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,  156,  157,  157,    0,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  159,  159,    0,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  160,  160,    0,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  161,  161,    0,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  162,    0,    0,    0,
        0,  162,    0,    0,    0,    0,    0,  162,  165,    0,

        0,    0,  165,    0,    0,    0,  165,  165,  169,    0,
        0,    0,    0,  169,    0,    0,    0,    0,  169,  169,
      173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,  173,  174,  174,    0,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  179,  179,    0,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  182,    0,    0,    0,    0,  182,    0,    0,
        0,    0,    0,  182,  183,  183,    0,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  184,
      184,    0,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  185,  185,    0,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  186,
        0,    0,    0,    0,  186,    0,    0,    0,    0,    0,
      186,  187,  187,    0,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  191,    0,    0,    0,
        0,  191,    0,    0,    0,    0,    0,  191,  192,  192,
        0,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  193,  193,    0,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  194,  194,
        0,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  195,    0,    0,    0,  195,    0,    0,
        0,  195,  195,  199,    0,    0,    0,    0,  199,    0,
        0,    0,    0,  199,  199,  203,  203,    0,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      204,  204,    0,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  206,  206,    0,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      208,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      208,  208,  210,  210,    0,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  212,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  212,  212,  214,
      214,    0,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  217,    0,    0,    0,  217,    0,
        0,    0,  217,  217,  221,    0,    0,    0,    0,  221,
        0,    0,    0,    0,  221,  221,  223,  223,    0,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  229,    0,    0,    0,    0,  229,    0,    0,    0,
        0,    0,  229,  230,  230,    0,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  238,    0,
        0,    0,    0,  238,    0,    0,    0,    0,  238,  238,

      242,  242,    0,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  243,    0,    0,    0,    0,
      243,    0,    0,    0,    0,    0,  243,  244,  244,    0,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  247,    0,    0,    0,    0,  247,    0,    0,
        0,    0,    0,  247,  248,  248,    0,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  249,
      249,    0,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  251,    0,    0,    0,    0,  251,
        0,    0,    0,    0,  251,  251,  257,  257,    0,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  262,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  262,  262,  267,    0,    0,    0,    0,  267,    0,
        0,    0,    0,  267,  267,  271,  271,    0,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      272,    0,    0,    0,    0,  272,    0,    0,    0,    0,
        0,  272,  273,  273,    0,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  276,    0,    0,
        0,    0,  276,    0,    0,    0,    0,    0,  276,  277,
      277,    0,  277,  277,  277,  277,  277,  277,  277,  277,

      277,  277,  277,  277,  278,  278,    0,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  283,
        0,    0,    0,    0,  283,    0,    0,    0,    0,  283,
      283,  285,  285,    0,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  287,    0,    0,    0,
        0,  287,    0,    0,    0,    0,  287,  287,  289,  289,
        0,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  290,  290,    0,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  296,    0,
        0,    0,    0,  296,    0,    0,    0,    0,  296,  296,

      298,  298,    0,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  299,  299,    0,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      300,    0,    0,    0,    0,  300,    0,    0,    0,    0,
      300,  300,  303,  303,    0,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  306,    0,    0,
        0,    0,  306,    0,    0,    0,    0,  306,  306,  311,
        0,    0,    0,    0,  311,    0,    0,    0,    0,  311,
      311,  317,    0,    0,    0,    0,  317,    0,    0,    0,
        0,    0,  317,  318,  318,    0,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  323,    0,
        0,    0,    0,  323,    0,    0,    0,    0,  323,  323,
      328,    0,    0,    0,    0,  328,    0,    0,    0,    0,
      328,  328,  333,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  333,  333,  340,    0,    0,    0,    0,  340,
        0,    0,    0,    0,    0,  340,  341,  341,    0,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  346,    0,    0,    0,    0,  346,    0,    0,    0,
        0,  346,  346,  353,    0,    0,    0,    0,  353,    0,
        0,    0,    0,  353,  353,  356,  356,    0,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      359,  359,    0,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,    0,    0,    0,    0,
      360,    0,    0,    0,    0,  360,  360,  365,    0,    0,
        0,    0,  365,    0,    0,    0,    0,  365,  365,  373,
        0,    0,    0,    0,  373,    0,    0,    0,    0,  373,
      373,  381,    0,    0,    0,    0,  381,    0,    0,    0,
        0,  381,  381,  387,    0,    0,    0,    0,  387,    0,
        0,    0,    0,  387,  387,  394,    0,    0,  394,  395,
      395,    0,  395,  396,  396,  396,  397,  397,    0,  397,

      398,  398,  398,  398,  399,  399,    0,  399,  400,  400,
      400,  400,  401,  401,  401,  402,  402,    0,  402,  403,
      403,  403,  403,  404,  404,    0,  404,  405,  405,  405,
      405,  406,    0,    0,  406,  407,  407,    0,  407,  408,
      408,  408,  408,  409,  409,    0,  409,  410,  410,  410,
      410,  411,  411,  411,  412,  412,  412,  412,  413,  413,
        0,  413,  414,  414,  414,  414,  415,  415,    0,  415,
      416,  416,  416,  416,  417,  417,    0,  417,  418,  418,
      418,  418,  419,  419,  419,  419,  420,  420,    0,  420,
      421,  421,  421,  421,  422,  422,    0,  422,  423,  423,

      423,  423,  424,  424,  424,  424,  425,  425,    0,  425,
      426,  426,  426,  426,  427,  427,  427,  427,  428,  428,
      428,  429,  429,  429,  429,  430,  430,  430,  430,  431,
      431,  431,  431,  432,  432,    0,  432,  433,  433,  433,
      433,  434,  434,  434,  434,  435,  435,  435,  435,  436,
      436,    0,  436,  437,  437,  437,  437,  438,  438,  438,
      438,  439,  439,  439,  439,  440,  440,  440,  440,  441,
      441,  441,  441,  442,  442,  442,  442,  443,  443,  443,
      444,  444,  444,  444,  445,  445,  445,  445,  446,  446,
      446,  446,  447,  447,  447,  447,  448,  448,  448,  448,

      449,  449,  449,  449,  450,  450,  450,  450,  451,  451,
      451,  451,  452,  452,  452,  452,  453,  453,  453,  453,
      454,  454,  454,  454,  455,  455,  455,  455,  456,  456,
      456,  456,  457,  457,  457,  457,  458,  458,  458,  458,
      459,  459,  459,  459,  460,  460,  460,  460,  461,  461,
      461,  461,  462,  462,  462,  462,  463,  463,  463,  463,
      464,  464,  464,  464,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[15] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include "y.tab.hh"
#include "shell.hh"
#include <sys/wait.h>
#include <fcntl.h>
#include <unistd.h>

// Extern for reading input into read-line.c
extern "C" char * read_line();

// Custon function to handle any input not from a file through read_line()
int mygetc(FILE * f) {
  static char *p;
  char ch;
  
  if(!isatty(0)) {
    return getc(f);
  }

  if (p == NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;

}

#undef getc
#define getc(f) mygetc(f)


// Subshell Setup: Functions for passing from buffer
static void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}


// Run source input from a file to shell
int source_cmd(const char * file) {
  // Initialize fp object with r+ permissions from passed file.
  FILE * fp = fopen(file, "r+");  

  // If file does not exist, return error state.
  if (!fp) {return -1;}
  fseek(fp, 0L, SEEK_SET);  

  // Create and push a new buffer with default buffer size to the stack
  yypush_buffer_state(yy_create_buffer(fp, YY_BUF_SIZE));
  // Update source boolean to indicate source input has started.
  Shell::_source = true;
  // Parse source input and pop buffer off of stack when finished.
  yyparse();
  yypop_buffer_state();

  // Close fp object and update shell boolean. Return normal state.
  fclose(fp);
  Shell::_source = false;
  return 0;
}

#line 1145 "lex.yy.cc"
#line 1146 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 82 "shell.l"


#line 1366 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 394 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2065 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 84 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 88 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "shell.l"
{
  return LESS;	
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 104 "shell.l"
{
  return GREATAMP;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 108 "shell.l"
{
  return GREATGREATAMP;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 112 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 116 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 120 "shell.l"
{
  return AMP; 
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 124 "shell.l"
{
  // Subshell comamnd
  // Initialize initial buffer size
  int buffer_size = 1024;

  // Create string from input command and remove noise characters ($, (, ), `)
  std::string str = std::string(yytext);
  if (str.at(0) == '$') {
    str = str.substr(1, std::string::npos);
  }
  str = str.substr(1, str.size() - 2);
  // Pass exit command to input string to ensure subshell process exits
  str += "\nexit\n";
  
  // Create default stdin/stdout file descriptors 
  int defaultin = dup(0);
  int defaultout = dup(1);
  
  // Initialze pipes and check for errors
  int pipein[2];
  int pipeout[2];
  
  if (pipe(pipein) == -1 || pipe(pipeout) == -1) {
    perror("pipe");
    exit(2);
  }

  // Direct stdin and stdout to relevant pipes and close pipe descriptors
  dup2(pipein[0], 0);
  dup2(pipeout[1], 1);

  close(pipein[0]);
  close(pipeout[1]);

  // Write input to input pipe and close file descriptor
  write(pipein[1], str.c_str(), str.size());
  close(pipein[1]);

  // Create child process with fork)(
  int ret = fork();
  // If child process:
  if (ret == 0) { 
    // Create and execute the subshell process with no arguments, checking for 
    // execvp errors
    char *args[] = {(char *) "/proc/self/exe", NULL};
    execvp(args[0], args);
    
    perror("execvp");
    _exit(1);
  // Error in fork detected, return error state
  } else if (ret < 0) {
    perror("fork");
    exit(2);
  }

  // Wait for subshell to finish executing
  while(waitpid(ret, NULL, 0) == -1);

  // Create buffer with specified initial size and pointer to stay
  // at the start of the buffer 
  char * buffer = (char*) malloc(buffer_size * sizeof(char*));
  char * buffer_start = buffer;

  // Initialize counter of characters read
  int index = 0;
  
  // Give output pipe appropriate flags/permissions so that read command
  // does not hang when all input is read, and instead returns value <= 0.
  fcntl(pipeout[0], F_SETFL, O_NONBLOCK);

  // Read from buffer each character one by one, replacing newline characters with spaces
  // and resizing buffer as necessary with realloc().
  while(read(pipeout[0], buffer, 1) > 0) {
    if(*buffer == '\n') {*buffer = ' ';} 
    index++;
    buffer++;
    if(index == buffer_size) {
      buffer_size *= 2; 
      buffer_start = (char*) realloc(buffer_start, buffer_size * sizeof(char*));
    }
  }
  
  // Reset primary buffer pointer to the start of the buffer, close output pipe, and
  // add a null terminator.
  buffer = buffer_start;
  buffer[index - 1] = '\0';  
  close(pipeout[0]);  
  
  // For all output characters, excluding the twelve
  // characters that make up the shell process goodbye
  // message, call yyunput() to pass to input buffer yytext.
  for(int i = index - 12; i >= 0; i--) {
    yyunput(buffer[i], yytext);
  }

  // Deallocate buffer
  free(buffer);

  // Redirect stdin/stdout to defaults and close file descriptors
  dup2(defaultin, 0);
  dup2(defaultout, 1);

  close(defaultin);
  close(defaultout);

}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 232 "shell.l"
{
  // Initialize string and counter to track quotes and escape characters
  std::string escape_quote_str = std::string(yytext);
  int quote_count = 0;
  int slash_idx = escape_quote_str.find('/', 0);
  
  // TILDE EXPANSION: Check for all valid cases using tilde expansion and replace with appropriate automatic 
  // path, either the HOME environmental variable or a specific user home (hard coded). Adjusts quote_count
  // when necessary to maintain accuracy.
  if ( escape_quote_str.at(0) == '~' && escape_quote_str.at(1) == '/') {
    escape_quote_str.erase(0, 1);
    escape_quote_str = getenv("HOME") + escape_quote_str;
  } else if ( escape_quote_str.length() >= 2 && escape_quote_str.at(0) == '\"' && escape_quote_str.at(1) == '~' && escape_quote_str.at(2) == '/' ) {
    escape_quote_str.erase(0, 2);
    escape_quote_str = getenv("HOME") + escape_quote_str;
    quote_count--;
  } else if ( escape_quote_str.at(0) == '~' && slash_idx != std::string::npos ) {
    std::string user = escape_quote_str.substr(1, slash_idx - 1);
    escape_quote_str.erase(0, slash_idx);
    escape_quote_str = "/homes/" + user + escape_quote_str;
  } else if ( escape_quote_str.at(0) == '\"' && escape_quote_str.at(1) == '~' && slash_idx != std::string::npos ) {
    std::string user = escape_quote_str.substr(2, slash_idx - 2);
    escape_quote_str.erase(0, slash_idx);
    escape_quote_str = "/homes/" + user + escape_quote_str;
    quote_count--;
  } else if ( escape_quote_str.at(0) == '\"' && escape_quote_str.at(1) == '~' && escape_quote_str.at(2) != '\"' ) {
    escape_quote_str.erase(0, 2);
    escape_quote_str = "/homes/" + escape_quote_str;
    quote_count--;
  } else if ( escape_quote_str.at(0) == '\"' && escape_quote_str.at(1) == '~') {
    escape_quote_str.erase(0, 2);
    escape_quote_str = getenv("HOME") + escape_quote_str;
    quote_count--;
  }

  // Find first instance of quote, if present
  size_t str_idx = escape_quote_str.find('\"', 0);
  // While an instance of quotes that are not escape characters are still in the string, 
  // remove them from the input string and add to quote counter.
  while (str_idx != std::string::npos) {
     if (str_idx == 0) {
        escape_quote_str = escape_quote_str.substr(str_idx + 1, std::string::npos);
        quote_count++;
     } else if (escape_quote_str.at(str_idx - 1) != '\\') {
        escape_quote_str = escape_quote_str.substr(0, str_idx) + escape_quote_str.substr(str_idx + 1, std::string::npos);
        quote_count++;
     } else {str_idx++;}
     str_idx = escape_quote_str.find('\"', str_idx);
  }
  // If an odd number of quotes are present, return a syntax error.
  if (quote_count % 2 == 1) return NOTOKEN;

  // ENVIRONMENTAL VARIABLES: Exapnd evironmental variables when necessary. Includes custom built-in environmenal
  // variables.
  str_idx = escape_quote_str.find('$', 0);
  while (str_idx != std::string::npos && escape_quote_str.length() - (str_idx + 1) > 0) {
    if (str_idx == 0) {
      escape_quote_str = escape_quote_str.substr(str_idx + 1, std::string::npos);
    } else if (escape_quote_str.at(str_idx - 1) != '\\') {
      escape_quote_str = escape_quote_str.substr(0, str_idx) + escape_quote_str.substr(str_idx + 1, std::string::npos);
    } else {str_idx = escape_quote_str.find('$', str_idx); continue;}      
    if (escape_quote_str.at(str_idx) == '{') {
        size_t end_idx = escape_quote_str.find('}', str_idx);
        if (end_idx != std::string::npos) {
          std::string component = escape_quote_str.substr(str_idx + 1, end_idx - str_idx - 1);
          std::string result = "";
          if ( strcmp(component.c_str(), "$") == 0) {
            result += std::to_string(getpid());
          } else if ( strcmp(component.c_str(), "?") == 0) {
             result += std::to_string(Shell::_returnStatus);
          } else if ( strcmp(component.c_str(), "!") == 0) {
            result += std::to_string(Shell::_bkgPIDs.back());
          } else if ( strcmp(component.c_str(), "_") == 0) {
            result += Shell::_currentCommand.getLastArgument();
          } else if ( strcmp(component.c_str(), "SHELL") == 0) {
            char path[1024];
	    realpath("../shell", path);
            result += std::string(path);
          } else if (getenv(component.c_str())) {
              result += std::string(getenv(component.c_str()));
          } else {
            return NOTOKEN;
          }
          escape_quote_str = escape_quote_str.substr(0, str_idx) + result + escape_quote_str.substr(end_idx + 1, std::string::npos);
        } else {return NOTOKEN;}
    }
    str_idx = escape_quote_str.find('$', str_idx);
  }

  // Find first instance of escape character, if present.
  size_t idx = escape_quote_str.find('\\', 0);
  // While an instance of an escape character is still in the string, remove it.
  while (idx != std::string::npos) {
     if (idx != 0) {
        escape_quote_str = escape_quote_str.substr(0, idx) + escape_quote_str.substr(idx + 1, std::string::npos);
     } else {
        escape_quote_str = escape_quote_str.substr(idx + 1, std::string::npos);
     }
     idx = escape_quote_str.find('\\', idx + 1);
  }
  // Set up and return processed word to grammar.
  yylval.cpp_string = new std::string(escape_quote_str);
  return WORD;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 337 "shell.l"
{
  // For strings with possible escape characters that do not include quotes,
  // handle escape characters with a while loop utilizing same method.
  std::string escape_str = std::string(yytext);
  bool expansion = false;
  int slash_idx = escape_str.find('/', 0);

  // ENVIRONMENTAL VARIABLES: Exapnd evironmental variables when necessary. Includes custom built-in environmenal
  // variables. 
  size_t str_idx = escape_str.find('$', 0);
  while (str_idx != std::string::npos && escape_str.length() - (str_idx + 1) > 0) {
    if (str_idx == 0) {
      escape_str = escape_str.substr(str_idx + 1, std::string::npos);
    } else if (escape_str.at(str_idx - 1) != '\\') {
      escape_str = escape_str.substr(0, str_idx) + escape_str.substr(str_idx + 1, std::string::npos);
    } else {str_idx = escape_str.find('$', str_idx); continue;}      
    if (escape_str.at(str_idx) == '{') {
        size_t end_idx = escape_str.find('}', str_idx);
        if (end_idx != std::string::npos) {
          std::string component = escape_str.substr(str_idx + 1, end_idx - str_idx - 1);
          std::string result = "";
          if ( strcmp(component.c_str(), "$") == 0) {
            result += std::to_string(getpid());
          } else if ( strcmp(component.c_str(), "?") == 0) {
             result += std::to_string(Shell::_returnStatus);
          } else if ( strcmp(component.c_str(), "!") == 0 && Shell::_lastBkgProcess != -1) {
            result += std::to_string(Shell::_lastBkgProcess);
          } else if ( strcmp(component.c_str(), "_") == 0 && Shell::_currentCommand.getLastArgument().size() > 0) {
            result += Shell::_currentCommand.getLastArgument();
          } else if ( strcmp(component.c_str(), "SHELL") == 0) {
            char path[1024];
	    realpath("../shell", path);
            result += std::string(path);
          } else if (getenv(component.c_str())) {
              result += std::string(getenv(component.c_str()));
          } else {
            return NOTOKEN;
          }
          escape_str = escape_str.substr(0, str_idx) + result + escape_str.substr(end_idx + 1, std::string::npos);
        }
    }
    str_idx = escape_str.find('$', str_idx);
  }

  // TILDE EXPANSION: Checks for all valid cases and replaces with appropriate environmental variable
  // or path. 
  if ( escape_str.at(0) == '~' && escape_str.length() == 1 ) {
    escape_str = getenv("HOME");
    expansion = true;
  } else if ( escape_str.at(0) == '~' && escape_str.at(1) == '/') {
    escape_str.erase(0, 1);
    escape_str = getenv("HOME") + escape_str;
    expansion = true;
  } else if ( escape_str.at(0) == '~' && slash_idx != std::string::npos ) {
    std::string user = escape_str.substr(1, slash_idx - 1);
    escape_str.erase(0, slash_idx);
    escape_str = "/homes/" + user + escape_str;
    expansion = true;
  } else if ( escape_str.at(0) == '~') {
    escape_str.erase(0, 1);
    escape_str = "/homes/" + escape_str;
    expansion = true;
  }

  // If tilde expansion happened, quotes should not be checked. Return WORD with current
  // processed string.
  if (expansion) {
    yylval.cpp_string = new std::string(escape_str);
    return WORD;
  }

  // Find excape characters and check for single quotes (if one quote is found, return error)
  //if (escape_str.find('\"', 0) != std::string::npos) {return NOTOKEN;}
  size_t idx = escape_str.find('\\', 0);
  while (idx != std::string::npos) {
     if (idx != 0) {
        escape_str = escape_str.substr(0, idx) + escape_str.substr(idx + 1, std::string::npos);
     } else {
        escape_str = escape_str.substr(idx + 1, std::string::npos);
     }
     idx = escape_str.find('\\', idx + 1);
  }

  // Set up and return processed word to grammar.
  yylval.cpp_string = new std::string(escape_str);
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 424 "shell.l"
ECHO;
	YY_BREAK
#line 1820 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 394 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 394 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 393);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 424 "shell.l"
